/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practfirmadigital;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.spec.EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author escom
 */
public class menuFirmaVerificacion extends javax.swing.JFrame {

    String rutaMensaje;
    String nombreMensaje;
    String rutaLlave;
    String rutaGuardado;

    public menuFirmaVerificacion() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoR = new javax.swing.ButtonGroup();
        radioFirma = new javax.swing.JRadioButton();
        radioVerificacion = new javax.swing.JRadioButton();
        botonGenerar = new javax.swing.JButton();
        botonMensaje = new javax.swing.JButton();
        botonLlave = new javax.swing.JButton();
        panelRuta = new javax.swing.JPanel();
        labelRuta = new javax.swing.JLabel();
        botonRutaGuardado = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        grupoR.add(radioFirma);
        radioFirma.setSelected(true);
        radioFirma.setText("Firma");
        radioFirma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioFirmaActionPerformed(evt);
            }
        });

        grupoR.add(radioVerificacion);
        radioVerificacion.setText("Verificacion");
        radioVerificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioVerificacionActionPerformed(evt);
            }
        });

        botonGenerar.setText("Generar firma");
        botonGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGenerarActionPerformed(evt);
            }
        });

        botonMensaje.setText("Seleccionar mensaje");
        botonMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMensajeActionPerformed(evt);
            }
        });

        botonLlave.setText("Seleccionar llave");
        botonLlave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLlaveActionPerformed(evt);
            }
        });

        labelRuta.setText("Ruta guardado:");

        botonRutaGuardado.setText("...");
        botonRutaGuardado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRutaGuardadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelRutaLayout = new javax.swing.GroupLayout(panelRuta);
        panelRuta.setLayout(panelRutaLayout);
        panelRutaLayout.setHorizontalGroup(
            panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRutaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelRuta)
                .addGap(18, 18, 18)
                .addComponent(botonRutaGuardado, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        panelRutaLayout.setVerticalGroup(
            panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRutaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelRutaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRuta)
                    .addComponent(botonRutaGuardado))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRuta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(radioFirma)
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(botonMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioVerificacion)
                            .addComponent(botonLlave, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(botonGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioVerificacion)
                    .addComponent(radioFirma))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonMensaje)
                    .addComponent(botonLlave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonGenerar)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioVerificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioVerificacionActionPerformed
        botonGenerar.setText("Verificar");
        panelRuta.setVisible(false);
        reiniciarBotones();
    }//GEN-LAST:event_radioVerificacionActionPerformed

    private void radioFirmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioFirmaActionPerformed
        botonGenerar.setText("Generar Firma");
        panelRuta.setVisible(true);
        reiniciarBotones();
    }//GEN-LAST:event_radioFirmaActionPerformed

    private void botonGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGenerarActionPerformed
        if (radioFirma.isSelected())
            generarFirma();
        else
            verificar();
    }//GEN-LAST:event_botonGenerarActionPerformed

    private void reiniciarBotones() {
        botonMensaje.setText("Seleccionar mensaje");
        rutaMensaje = null;
        botonLlave.setText("Seleccionar llave");
        rutaLlave = null;
    }

    private void botonRutaGuardadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRutaGuardadoActionPerformed

        JFileChooser selector = new JFileChooser();
        selector.setCurrentDirectory(new File("."));
        selector.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        selector.showOpenDialog(this);
        try {
            rutaGuardado = selector.getSelectedFile().getAbsolutePath();

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado una ruta");
        }

        if (rutaGuardado != null) {
            System.out.println(rutaGuardado);
            botonRutaGuardado.setText(rutaGuardado);
        }
    }//GEN-LAST:event_botonRutaGuardadoActionPerformed

    private void botonMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMensajeActionPerformed
        JFileChooser selector = new JFileChooser();
        selector.setCurrentDirectory(new File("."));
        selector.showOpenDialog(this);
        try {
            rutaMensaje = selector.getSelectedFile().getAbsolutePath();
            nombreMensaje = selector.getSelectedFile().getName();

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado una ruta");
        }

        if (rutaMensaje != null) {
            System.out.println(rutaMensaje);
            System.out.println(nombreMensaje);
            botonMensaje.setText(rutaMensaje);
        }
    }//GEN-LAST:event_botonMensajeActionPerformed

    private void botonLlaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLlaveActionPerformed
        JFileChooser selector = new JFileChooser();
        selector.setCurrentDirectory(new File("."));
        selector.showOpenDialog(this);
        try {
            rutaLlave = selector.getSelectedFile().getAbsolutePath();

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "No ha seleccionado una ruta");
        }

        if (rutaLlave != null) {
            System.out.println(rutaLlave);
            botonLlave.setText(rutaLlave);
        }
    }//GEN-LAST:event_botonLlaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menuFirmaVerificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menuFirmaVerificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menuFirmaVerificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menuFirmaVerificacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menuFirmaVerificacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonGenerar;
    private javax.swing.JButton botonLlave;
    private javax.swing.JButton botonMensaje;
    private javax.swing.JButton botonRutaGuardado;
    private javax.swing.ButtonGroup grupoR;
    private javax.swing.JLabel labelRuta;
    private javax.swing.JPanel panelRuta;
    private javax.swing.JRadioButton radioFirma;
    private javax.swing.JRadioButton radioVerificacion;
    // End of variables declaration//GEN-END:variables

    private void generarFirma() {
        if (rutaMensaje == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un mensaje");
            return;
        }
        if (rutaLlave == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una llave");
            return;
        }
        if (rutaGuardado == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una ruta de guardado");
            return;
        }

        File mensaje = new File(rutaMensaje);
        File privateKeyFile = new File(rutaLlave);
        nombreMensaje = nombreMensaje.replace(".txt", "");
        File fSalida = new File(rutaGuardado + File.separator + nombreMensaje + "_Firma.txt");

        // Gemeracion digesto
        byte[] digest = null;
        try {
            MessageDigest msgDigest = MessageDigest.getInstance("SHA-256");
            try {
                FileInputStream fis = new FileInputStream(mensaje);
                int msgContentSize = fis.available();
                byte[] msgContent = new byte[fis.available()];
                fis.read(msgContent);
                String msg = new String(msgContent);
                System.out.println("Mensaje p");
                System.out.println(msg);

                msgDigest.update(msgContent, 0, msgContentSize);
                digest = msgDigest.digest();
                System.out.println("Digesto completo");
                String d = new String(digest);
                System.out.println(d);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            byte[] privateKeyBytes = Files.readAllBytes(privateKeyFile.toPath());
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
            RSAPrivateKey privateKey = (RSAPrivateKey) keyFactory.generatePrivate(privateKeySpec);

            try {
                Cipher cipher = Cipher.getInstance("RSA");
                cipher.init(Cipher.ENCRYPT_MODE, privateKey);

                byte[] encrypted;
                encrypted = cipher.doFinal(digest); // Se cifra el digesto
                System.out.println("Cifrado completo");
                String e = new String(encrypted);
                System.out.println(e);

                // Concateniacion archivo original + digesto cifrado por RSA
                byte[] mensajeBytes = Files.readAllBytes(mensaje.toPath());
                String clave_union = "**^.^**";
                byte[] unionBytes = clave_union.getBytes();
                System.out.println(unionBytes.length);
                System.out.println("Union bytes");
                String u = new String(unionBytes);
                System.out.println(u);

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                baos.write(mensajeBytes); // Bytes del archivo original
                baos.write(unionBytes); // Bytes de la "union"
                baos.write(encrypted); // Bytes del digesto cifrado por RSA
                String t = new String(baos.toByteArray());
                System.out.println("Todo");
                System.out.println(t);

                OutputStreamWriter fich_out = new OutputStreamWriter(new FileOutputStream(fSalida), StandardCharsets.UTF_8);
                fich_out.write(new String(mensajeBytes));
                fich_out.close();
                
                
                FileOutputStream fich_out2 = new FileOutputStream(fSalida, true);
                //fich_out2.write(mensajeBytes);
                fich_out2.write(unionBytes);
                fich_out2.write(encrypted);
                fich_out2.close();
                JOptionPane.showMessageDialog(this, "Guardado finalizado");

            } catch (NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
                Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (IOException ex) {
            Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            JOptionPane.showMessageDialog(this, "Tipo de llave no valida");
        }
    }

    private void verificar() {
        if (rutaMensaje == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un mensaje");
            return;
        }
        if (rutaLlave == null) {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una llave");
            return;
        }

        File mensaje = new File(rutaMensaje);
        File publicKeyFile = new File(rutaLlave);

        byte[] msgContent = null;
        int msgContentSize = 0;
        // Lectura contenido mensaje
        try {
            FileInputStream fis = new FileInputStream(mensaje);
            msgContentSize = fis.available();
            msgContent = new byte[msgContentSize];
            fis.read(msgContent);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        String m = new String(msgContent);
        System.out.println(m);

        // Recorrido en busca de "union"
        String clave_union = "**^.^**";
        int offset = -1;
        byte[] unionBytes = clave_union.getBytes();
        for (int i = 0; i < msgContentSize; i++) {
            if (Byte.compare(msgContent[i], unionBytes[0]) == 0) {
                ++i;
                if (Byte.compare(msgContent[i], unionBytes[1]) == 0) {
                    ++i;
                    if (Byte.compare(msgContent[i], unionBytes[2]) == 0) {
                        ++i;
                        if (Byte.compare(msgContent[i], unionBytes[3]) == 0) {
                            ++i;
                            if (Byte.compare(msgContent[i], unionBytes[4]) == 0) {
                                ++i;
                                if (Byte.compare(msgContent[i], unionBytes[5]) == 0) {
                                    ++i;
                                    if (Byte.compare(msgContent[i], unionBytes[6]) == 0) {
                                        offset = ++i;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            offset = -1;
        }

        if (offset == -1) {
            JOptionPane.showMessageDialog(this, "Mensaje sin firma");
            return;
        }
        System.out.println("Offset: " + offset);
        System.out.println("msgContentSize: " + msgContentSize);
        System.out.println("String size: " + m.length());
        String a = new String(msgContent, 0, offset - 7);
        String b = new String(msgContent, offset, msgContentSize - offset);

        System.out.println("Msg puro");
        System.out.println(a);
        System.out.println("TAMANO FIRMA: " +b.length());
        System.out.println("Firma: ");
        System.out.println(b);

        // Digesto a mensaje
        byte[] digest = null;
        try {
            MessageDigest msgDigest = MessageDigest.getInstance("SHA-256");
            msgDigest.update(msgContent, 0, offset - 7);
            digest = msgDigest.digest();
            System.out.println("Digesto completo");
            String d = new String(digest);
            System.out.println(d);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            byte[] publicKeyBytes = Files.readAllBytes(publicKeyFile.toPath());
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
            Key publicKey = keyFactory.generatePublic(publicKeySpec);

            try {
                Cipher cipher = Cipher.getInstance("RSA");
                cipher.init(Cipher.DECRYPT_MODE, publicKey);

                cipher.update(msgContent, offset, msgContentSize - offset); // Se descifra el archivo
                byte[] decrypted = cipher.doFinal();
                System.out.println("Descifrado RSA completo");
                String de = new String(decrypted);
                System.out.println(de);

                if (Arrays.equals(digest, decrypted)) {
                    JOptionPane.showMessageDialog(this, "Verificacion aceptada");
                } else {
                    JOptionPane.showMessageDialog(this, "Verificacion rechazada");
                }
            } catch (NoSuchPaddingException ex) {
                JOptionPane.showMessageDialog(this, "Error padding");
            } catch (InvalidKeyException ex) {
                JOptionPane.showMessageDialog(this, "Llave invalida");
            } catch (IllegalBlockSizeException ex) {
                JOptionPane.showMessageDialog(this, "Verificacion rechazada");
            } catch (BadPaddingException ex) {
                JOptionPane.showMessageDialog(this, "Verificacion rechazada");
            }

           

        } catch (IOException ex) {
            Logger.getLogger(menuFirmaVerificacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            JOptionPane.showMessageDialog(this, "Error padding");
        } catch (InvalidKeySpecException ex) {
            JOptionPane.showMessageDialog(this, "Tipo de llave no valida");
        }

    }
}
